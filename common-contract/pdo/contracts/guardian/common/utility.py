# Copyright 2023 Intel Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import jsonschema
import os
import random
import string

from pdo.common.key_value import KeyValueStore

import logging
logger = logging.getLogger(__name__)

# -----------------------------------------------------------------
def ValidateJSON(instance, schema):
    try:
        jsonschema.validate(instance=instance, schema=schema)
    except jsonschema.exceptions.ValidationError as err:
        return False
    return True

# -----------------------------------------------------------------
# Size of chunks to store per key; this is the maximum size of a
# single key in the KeyValueStore
__CHUNK_SIZE__ = 1024

# -----------------------------------------------------------------
def send_file(file_name, block_store = None, **kwargs):
    """
    Store the contents of a file in the KeyValueStore under a specified key. Sync any updated
    blocks to the block store if specified. Returns a dictionary containing information that
    can be used to receive the file from the KeyValueStore later.

    :param file_name: Name of the file to be stored.
    :param block_store: Optional parameter of type pdo.service_client.storage.StorageServiceClient

    :return: A dictionary containing the base key, number of chunks, encryption key, and state hash.
    """

    key = ''.join(random.choice(string.ascii_letters) for _ in range(16))

    kv = KeyValueStore()

    chunks = (os.path.getsize(file_name) + __CHUNK_SIZE__ - 1) // __CHUNK_SIZE__
    with open(file_name, 'rb') as fp :
        for chunk_number in range(0, chunks) :
            chunk = fp.read(__CHUNK_SIZE__)
            with kv : _ = kv.set(f'{key}_{chunk_number}', chunk, input_encoding='str', output_encoding='raw')

    if block_store :
        _ = kv.sync_to_block_store(block_store, **kwargs)

    file_information = dict()
    file_information['key_base'] = key
    file_information['chunks'] = chunks
    file_information['encryption_key'] = kv.encryption_key
    file_information['state_hash'] = kv.hash_identity

    return file_information

# -----------------------------------------------------------------
def recv_file(file_information, file_name, block_store = None, **kwargs) :
    """
    Receive the contents of a file in the KeyValueStore under a specified key. Sync any updated
    blocks from the block store if specified. Takes a dictionary containing the file information
    as generated by `send_file`.

    :param file_information: Dictionary containing the base key, number of chunks, encryption key, and state hash.
    :param file_name: Name of the file to be received.
    :param block_store: Optional parameter of type pdo.service_client.storage.StorageServiceClient
    """
    key_base = file_information['key_base']
    chunks = file_information['chunks']
    encryption_key = file_information['encryption_key']
    state_hash = file_information['state_hash']

    kv = KeyValueStore(encryption_key, state_hash)
    if block_store :
        _ = kv.sync_from_block_store(state_hash, block_store, **kwargs)

    with open(file_name, 'wb') as fp :
        for chunk_number in range(chunks) :
            with kv : chunk = kv.get(f'{key_base}_{chunk_number}', input_encoding='str', output_encoding='raw')
            fp.write(bytes(chunk))

    return True
